#!/usr/bin/env bash
#
# Perform linting of specified directories and generate configuration.

err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
}

# Check if no arguments were provided
if [[ $# -eq 0 ]] ; then
    err 'No paths for linting provided!'
    exit 1
fi

# Check requirements:
# script require swiftlint installed
if ! command -v swiftlint >/dev/null; then
    err 'SwiftLint NOT installed!'
    err "Install SwiftLint 'brew install swiftLint' and try again."
    exit 1
fi

# Temporary config file for swiftlint
temp_config="/tmp/swiftlintRules.yml"

# Fill temporary config file
cat << EOF > "$temp_config"
whitelist_rules:
  - rule

included:
EOF

# Fill config with paths to lint
for path in "$@"; do
  configurations_count=$(find "$path" -name '.swiftlint.yml' | wc -l)
  if ! [ "$configurations_count" -eq 0 ]; then
    err 'Found some .swiftlint.yml configuration files.'
    err 'In order to script work properly rename or remove this files.'
    exit 1
  fi

  if ! { [[ -d $path ]] || [[ -f $path ]]; }; then
    err "$path is not a file or directory!"
    exit 1
  fi

  echo "  - $path" >> "$temp_config"
done

# Takes a swiftlint rule as parameter
# Returns "errors_count:warning_count"
lint_rule() {
  sed -i'' -e "2c\\
  \ \ - $1
  " "$temp_config"

  swiftlint_output="$(swiftlint lint --config $temp_config --quiet --no-cache)"
  errors_count="$(echo "$swiftlint_output" | grep -c error:)"
  warnings_count="$(echo "$swiftlint_output" | grep -c warning:)"

  echo "$errors_count:$warnings_count"
}

# Capture raw output
swiftlint_rules="$(swiftlint rules)"
lines_count="$(echo "$swiftlint_rules" | wc -l)"

# Trim table heading and footer
swiftlint_rules="$(echo "$swiftlint_rules" | tail -n +4)"
swiftlint_rules="$(echo "$swiftlint_rules" | head -n $(( lines_count - 4 )) )"

# Get rules and opt-in parameter from table
swiftlint_rules="$(echo "$swiftlint_rules" | awk '{print $2 ":" $4}')"

rules_count="$(echo "$swiftlint_rules" | wc -l)"

passed_optional_rules=()
passed_regular_rules=()
failed_optional_rules=()
failed_regular_rules=()

echo "Linting $rules_count rules"
echo

# Lint all rules one by one
while read -r rule_record; do
  is_optional=$(echo "$rule_record" | awk -F: '{print $2}')
  rule_name=$(echo "$rule_record" | awk -F: '{print $1}')

  echo -n "Linting rule: $rule_name... "

  lint_result=$(lint_rule "$rule_name")
  errors_count=$(echo "$lint_result" | awk -F: '{print $1}')
  warning_count=$(echo "$lint_result" | awk -F: '{print $2}')

  if [ "$errors_count" -eq "0" ] && [ "$warning_count" -eq "0" ]; then
    # Succeded rules goes here
    echo "OK"

    if [ "$is_optional" = "yes" ]; then
      passed_optional_rules+=("$rule_name")
    else
      passed_regular_rules+=("$rule_name")
    fi
  else # Failed rules goes here
    echo "Found warnings: $warning_count errors: $errors_count."

    if [ "$is_optional" = "yes" ]; then
      failed_optional_rules+=("$rule_name:$errors_count:$warning_count")
    else
      failed_regular_rules+=("$rule_name:$errors_count:$warning_count")
    fi
  fi
done <<< "$swiftlint_rules"

echo
echo "Done linting $rules_count rules"
echo
echo "Suggested configuration for .swiftlint.yml :"
echo

# Generating YAML configuration
echo "  # Passed rules:"
for rule in "${passed_regular_rules[@]}"; do
  echo "  # $rule"
done

echo

echo "disabled_rules: # rule identifiers to exclude from running"
for rule in "${failed_regular_rules[@]}"; do
  errors_count=$(echo "$rule" | awk -F: '{print $2}')
  warnings_count=$(echo "$rule" | awk -F: '{print $3}')
  rule=$(echo "$rule" | awk -F: '{print $1}')
  echo "  - $rule # Warnings: $warnings_count Errors: $errors_count"
done

echo

echo "opt_in_rules: # some rules are only opt-in"
for rule in "${passed_optional_rules[@]}"; do
  echo "  - $rule"
done

echo "  # Failed opt-ins rules:"
for rule in "${failed_optional_rules[@]}"; do
  errors_count=$(echo "$rule" | awk -F: '{print $2}')
  warnings_count=$(echo "$rule" | awk -F: '{print $3}')
  rule=$(echo "$rule" | awk -F: '{print $1}')
  echo "  # - $rule # Warnings: $warnings_count Errors: $errors_count"
done

rm "$temp_config"
